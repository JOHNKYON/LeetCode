package questions.leetcode924;

import java.util.HashMap;
import java.util.HashSet;

public class MinimizeMalwareSpread {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        DSU dsu = new DSU(n, initial);
        for (int i=0; i<n; i++) {
            for (int j=0; j<i; j++) {
                if (graph[i][j] == 1)
                    dsu.union(i, j);
            }
        }
        return dsu.toRemove();
    }

    private class DSU {
        int[] parent;
        HashSet<Integer> set;
        public DSU(int n, int[] initial) {
            parent = new int[n];
            for (int i=0; i<n; i++) {
                parent[i] = i;
            }
            set = new HashSet<>();
            for (int i : initial)
                set.add(i);
        }

        public int find(int a) {
            if (parent[a] != a && parent[a] != -1)
                parent[a] = find(parent[a]);
            return parent[a];
        }

        public void union(int a, int b) {
            int ap = find(a);
            int bp = find(b);
            if (ap != bp) {
                if (ap == -1)
                    parent[bp] = -1;
                else if (bp == -1)
                    parent[ap] = -1;
                else if (set.contains(ap) && set.contains(bp)) {
                    parent[ap] = -1;
                    parent[bp] = -1;
                } else if (set.contains(ap)) {
                    parent[bp] = ap;
                } else
                    parent[ap] = bp;
            }
        }

        public int toRemove() {
            HashMap<Integer, Integer> hashmap = new HashMap<>();
            int ans = -1;
            int count = 0;
            for (int i: parent) {
                if (set.contains(i)) {
                    hashmap.put(i, hashmap.getOrDefault(i, 0) + 1);
                }
            }
            if (hashmap.isEmpty()) {
                ans = Integer.MAX_VALUE;
                for (Integer i: set)
                    ans = Math.min(ans, i);
            } else {
                for (Integer key: hashmap.keySet()) {
                    if (hashmap.get(key) > count) {
                        ans = key;
                        count = hashmap.get(key);
                    } if (hashmap.get(key) == count) {
                        ans = Math.min(ans, key);
                    }
                }
            }
            return ans;
        }
    }
}
